package com.kawaiicakes.almosttagged.config;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.reflect.TypeToken;
import net.minecraftforge.fml.loading.FMLPaths;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.HashSet;
import java.util.Set;

public class TagConfigBuilder {
    public static final Gson BUILDER = (new GsonBuilder()).setPrettyPrinting().create();

    public static final Path file = FMLPaths.GAMEDIR.get().toAbsolutePath().resolve("config").resolve("almostunified").resolve("tags.json");

    public static TagConfigEntries loadConfig() {
        try {
            if (Files.notExists(file)) {
                TagConfigEntries atConfig = new TagConfigEntries();

                final Set<String> initialItemSet = new HashSet<>();
                final Set<String> initialBlockSet = new HashSet<>();
                initialItemSet.add("TagKey[ minecraft:item / minecraft:air ]");
                initialBlockSet.add("TagKey[ minecraft:block / minecraft:air ]");

                atConfig.itemTagJsonMap.put("air", initialItemSet);
                atConfig.blockTagJsonMap.put("air", initialBlockSet);

                String defaultJson = BUILDER.toJson(atConfig, new TypeToken<TagConfigEntries>(){}.getType());
                Files.writeString(file, defaultJson);
            }

            return BUILDER.fromJson(Files.readString(file), TagConfigEntries.class);

        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    public static void reloadConfig() {
        /*try {
            TagStorageEntries atConfig = new TagStorageEntries();

            final Map<String, Set<String>> itemStringMap = new HashMap<>();
            final Map<String, Set<String>> blockStringMap = new HashMap<>();

            TagLoaderAPI.itemTagsByPreferredItem().forEach((k, v) -> itemStringMap.put(k.toString(), v.stream().map(TagKey::toString).collect(Collectors.toSet())));
            TagLoaderAPI.blockTagsByPreferredItem().forEach((k, v) -> blockStringMap.put(k.toString(), v.stream().map(TagKey::toString).collect(Collectors.toSet())));

            atConfig.Warning = "//DO NOT edit this file. If you encounter errors, delete this file and relaunch your game. If errors persist please open a new issue on Github.";
            atConfig.itemTagJsonMap.putAll(itemStringMap);
            atConfig.blockTagJsonMap.putAll(blockStringMap);

            String defaultJson = BUILDER.toJson(atConfig);
            Files.writeString(file, defaultJson);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }*/
    }
}
