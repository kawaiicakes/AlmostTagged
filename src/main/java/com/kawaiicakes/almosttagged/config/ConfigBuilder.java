package com.kawaiicakes.almosttagged.config;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.reflect.TypeToken;
import net.minecraftforge.fml.loading.FMLPaths;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;


public class ConfigBuilder {
    public static final Gson BUILDER = (new GsonBuilder()).setPrettyPrinting().create();

    public static final Path file = FMLPaths.GAMEDIR.get().toAbsolutePath().resolve("config").resolve("almosttagged.json");

    public static ConfigEntries loadConfig() {
        //write, then reload if tags in config do not match the tagMaps in TagMapGenerators.
        //this means a reload will always occur on first loading of a world since the config will be compared against null.
        //therefore consider moving this functionality into TagLoaderMixin and instead affirming #loadConfig as purely
        //reading the config. Reload functionality should occur prior to the passing of tags to the TagLoader.
        try {
            if (Files.notExists(file)) {
                ConfigEntries atConfig = new ConfigEntries();

                final Set<String> initialItemSet = new HashSet<>();
                final Set<String> initialBlockSet = new HashSet<>();
                initialItemSet.add("TagKey[ minecraft:item / minecraft:air ]");
                initialBlockSet.add("TagKey[ minecraft:block / minecraft:air ]");

                atConfig.Warning = "//DO NOT edit this file. If you encounter errors, delete this file and relaunch your game. If errors persist please open a new issue on Github.";
                atConfig.itemTagJsonMap.put("air", initialItemSet);
                atConfig.blockTagJsonMap.put("air", initialBlockSet);

                String defaultJson = BUILDER.toJson(atConfig, new TypeToken<ConfigEntries>(){}.getType());
                Files.writeString(file, defaultJson);
            }

            return BUILDER.fromJson(Files.readString(file), ConfigEntries.class);

        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    public static void reloadConfig() {
        try {
            ConfigEntries atConfig = new ConfigEntries();

            final Map<String, Set<String>> itemStringMap = new HashMap<>();
            final Map<String, Set<String>> blockStringMap = new HashMap<>();


            atConfig.Warning = "//DO NOT edit this file. If you encounter errors, delete this file and relaunch your game. If errors persist please open a new issue on Github.";
            atConfig.itemTagJsonMap.putAll(itemStringMap);
            atConfig.blockTagJsonMap.putAll(blockStringMap);

            String defaultJson = BUILDER.toJson(atConfig);
            Files.writeString(file, defaultJson);

        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }
}
